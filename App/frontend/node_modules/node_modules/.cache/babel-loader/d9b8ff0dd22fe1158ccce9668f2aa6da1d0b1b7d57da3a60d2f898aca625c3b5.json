{"ast":null,"code":"import { PluginKey, Plugin, TextSelection } from 'prosemirror-state';\nclass Rebaseable {\n  constructor(step, inverted, origin) {\n    this.step = step;\n    this.inverted = inverted;\n    this.origin = origin;\n  }\n}\n/**\nUndo a given set of steps, apply a set of other steps, and then\nredo them @internal\n*/\nfunction rebaseSteps(steps, over, transform) {\n  for (let i = steps.length - 1; i >= 0; i--) transform.step(steps[i].inverted);\n  for (let i = 0; i < over.length; i++) transform.step(over[i]);\n  let result = [];\n  for (let i = 0, mapFrom = steps.length; i < steps.length; i++) {\n    let mapped = steps[i].step.map(transform.mapping.slice(mapFrom));\n    mapFrom--;\n    if (mapped && !transform.maybeStep(mapped).failed) {\n      transform.mapping.setMirror(mapFrom, transform.steps.length - 1);\n      result.push(new Rebaseable(mapped, mapped.invert(transform.docs[transform.docs.length - 1]), steps[i].origin));\n    }\n  }\n  return result;\n}\n// This state field accumulates changes that have to be sent to the\n// central authority in the collaborating group and makes it possible\n// to integrate changes made by peers into our local document. It is\n// defined by the plugin, and will be available as the `collab` field\n// in the resulting editor state.\nclass CollabState {\n  constructor(\n  // The version number of the last update received from the central\n  // authority. Starts at 0 or the value of the `version` property\n  // in the option object, for the editor's value when the option\n  // was enabled.\n  version,\n  // The local steps that havent been successfully sent to the\n  // server yet.\n  unconfirmed) {\n    this.version = version;\n    this.unconfirmed = unconfirmed;\n  }\n}\nfunction unconfirmedFrom(transform) {\n  let result = [];\n  for (let i = 0; i < transform.steps.length; i++) result.push(new Rebaseable(transform.steps[i], transform.steps[i].invert(transform.docs[i]), transform));\n  return result;\n}\nconst collabKey = new PluginKey(\"collab\");\n/**\nCreates a plugin that enables the collaborative editing framework\nfor the editor.\n*/\nfunction collab() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let conf = {\n    version: config.version || 0,\n    clientID: config.clientID == null ? Math.floor(Math.random() * 0xFFFFFFFF) : config.clientID\n  };\n  return new Plugin({\n    key: collabKey,\n    state: {\n      init: () => new CollabState(conf.version, []),\n      apply(tr, collab) {\n        let newState = tr.getMeta(collabKey);\n        if (newState) return newState;\n        if (tr.docChanged) return new CollabState(collab.version, collab.unconfirmed.concat(unconfirmedFrom(tr)));\n        return collab;\n      }\n    },\n    config: conf,\n    // This is used to notify the history plugin to not merge steps,\n    // so that the history can be rebased.\n    historyPreserveItems: true\n  });\n}\n/**\nCreate a transaction that represents a set of new steps received from\nthe authority. Applying this transaction moves the state forward to\nadjust to the authority's view of the document.\n*/\nfunction receiveTransaction(state, steps, clientIDs) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // Pushes a set of steps (received from the central authority) into\n  // the editor state (which should have the collab plugin enabled).\n  // Will recognize its own changes, and confirm unconfirmed steps as\n  // appropriate. Remaining unconfirmed steps will be rebased over\n  // remote steps.\n  let collabState = collabKey.getState(state);\n  let version = collabState.version + steps.length;\n  let ourID = collabKey.get(state).spec.config.clientID;\n  // Find out which prefix of the steps originated with us\n  let ours = 0;\n  while (ours < clientIDs.length && clientIDs[ours] == ourID) ++ours;\n  let unconfirmed = collabState.unconfirmed.slice(ours);\n  steps = ours ? steps.slice(ours) : steps;\n  // If all steps originated with us, we're done.\n  if (!steps.length) return state.tr.setMeta(collabKey, new CollabState(version, unconfirmed));\n  let nUnconfirmed = unconfirmed.length;\n  let tr = state.tr;\n  if (nUnconfirmed) {\n    unconfirmed = rebaseSteps(unconfirmed, steps, tr);\n  } else {\n    for (let i = 0; i < steps.length; i++) tr.step(steps[i]);\n    unconfirmed = [];\n  }\n  let newCollabState = new CollabState(version, unconfirmed);\n  if (options && options.mapSelectionBackward && state.selection instanceof TextSelection) {\n    tr.setSelection(TextSelection.between(tr.doc.resolve(tr.mapping.map(state.selection.anchor, -1)), tr.doc.resolve(tr.mapping.map(state.selection.head, -1)), -1));\n    tr.updated &= ~1;\n  }\n  return tr.setMeta(\"rebased\", nUnconfirmed).setMeta(\"addToHistory\", false).setMeta(collabKey, newCollabState);\n}\n/**\nProvides data describing the editor's unconfirmed steps, which need\nto be sent to the central authority. Returns null when there is\nnothing to send.\n\n`origins` holds the _original_ transactions that produced each\nsteps. This can be useful for looking up time stamps and other\nmetadata for the steps, but note that the steps may have been\nrebased, whereas the origin transactions are still the old,\nunchanged objects.\n*/\nfunction sendableSteps(state) {\n  let collabState = collabKey.getState(state);\n  if (collabState.unconfirmed.length == 0) return null;\n  return {\n    version: collabState.version,\n    steps: collabState.unconfirmed.map(s => s.step),\n    clientID: collabKey.get(state).spec.config.clientID,\n    get origins() {\n      return this._origins || (this._origins = collabState.unconfirmed.map(s => s.origin));\n    }\n  };\n}\n/**\nGet the version up to which the collab plugin has synced with the\ncentral authority.\n*/\nfunction getVersion(state) {\n  return collabKey.getState(state).version;\n}\nexport { collab, getVersion, rebaseSteps, receiveTransaction, sendableSteps };","map":{"version":3,"names":["PluginKey","Plugin","TextSelection","Rebaseable","constructor","step","inverted","origin","rebaseSteps","steps","over","transform","i","length","result","mapFrom","mapped","map","mapping","slice","maybeStep","failed","setMirror","push","invert","docs","CollabState","version","unconfirmed","unconfirmedFrom","collabKey","collab","config","arguments","undefined","conf","clientID","Math","floor","random","key","state","init","apply","tr","newState","getMeta","docChanged","concat","historyPreserveItems","receiveTransaction","clientIDs","options","collabState","getState","ourID","get","spec","ours","setMeta","nUnconfirmed","newCollabState","mapSelectionBackward","selection","setSelection","between","doc","resolve","anchor","head","updated","sendableSteps","s","origins","_origins","getVersion"],"sources":["/Users/xander/go/hexon/frontend/node_modules/prosemirror-collab/dist/index.js"],"sourcesContent":["import { PluginKey, Plugin, TextSelection } from 'prosemirror-state';\n\nclass Rebaseable {\n    constructor(step, inverted, origin) {\n        this.step = step;\n        this.inverted = inverted;\n        this.origin = origin;\n    }\n}\n/**\nUndo a given set of steps, apply a set of other steps, and then\nredo them @internal\n*/\nfunction rebaseSteps(steps, over, transform) {\n    for (let i = steps.length - 1; i >= 0; i--)\n        transform.step(steps[i].inverted);\n    for (let i = 0; i < over.length; i++)\n        transform.step(over[i]);\n    let result = [];\n    for (let i = 0, mapFrom = steps.length; i < steps.length; i++) {\n        let mapped = steps[i].step.map(transform.mapping.slice(mapFrom));\n        mapFrom--;\n        if (mapped && !transform.maybeStep(mapped).failed) {\n            transform.mapping.setMirror(mapFrom, transform.steps.length - 1);\n            result.push(new Rebaseable(mapped, mapped.invert(transform.docs[transform.docs.length - 1]), steps[i].origin));\n        }\n    }\n    return result;\n}\n// This state field accumulates changes that have to be sent to the\n// central authority in the collaborating group and makes it possible\n// to integrate changes made by peers into our local document. It is\n// defined by the plugin, and will be available as the `collab` field\n// in the resulting editor state.\nclass CollabState {\n    constructor(\n    // The version number of the last update received from the central\n    // authority. Starts at 0 or the value of the `version` property\n    // in the option object, for the editor's value when the option\n    // was enabled.\n    version, \n    // The local steps that havent been successfully sent to the\n    // server yet.\n    unconfirmed) {\n        this.version = version;\n        this.unconfirmed = unconfirmed;\n    }\n}\nfunction unconfirmedFrom(transform) {\n    let result = [];\n    for (let i = 0; i < transform.steps.length; i++)\n        result.push(new Rebaseable(transform.steps[i], transform.steps[i].invert(transform.docs[i]), transform));\n    return result;\n}\nconst collabKey = new PluginKey(\"collab\");\n/**\nCreates a plugin that enables the collaborative editing framework\nfor the editor.\n*/\nfunction collab(config = {}) {\n    let conf = {\n        version: config.version || 0,\n        clientID: config.clientID == null ? Math.floor(Math.random() * 0xFFFFFFFF) : config.clientID\n    };\n    return new Plugin({\n        key: collabKey,\n        state: {\n            init: () => new CollabState(conf.version, []),\n            apply(tr, collab) {\n                let newState = tr.getMeta(collabKey);\n                if (newState)\n                    return newState;\n                if (tr.docChanged)\n                    return new CollabState(collab.version, collab.unconfirmed.concat(unconfirmedFrom(tr)));\n                return collab;\n            }\n        },\n        config: conf,\n        // This is used to notify the history plugin to not merge steps,\n        // so that the history can be rebased.\n        historyPreserveItems: true\n    });\n}\n/**\nCreate a transaction that represents a set of new steps received from\nthe authority. Applying this transaction moves the state forward to\nadjust to the authority's view of the document.\n*/\nfunction receiveTransaction(state, steps, clientIDs, options = {}) {\n    // Pushes a set of steps (received from the central authority) into\n    // the editor state (which should have the collab plugin enabled).\n    // Will recognize its own changes, and confirm unconfirmed steps as\n    // appropriate. Remaining unconfirmed steps will be rebased over\n    // remote steps.\n    let collabState = collabKey.getState(state);\n    let version = collabState.version + steps.length;\n    let ourID = collabKey.get(state).spec.config.clientID;\n    // Find out which prefix of the steps originated with us\n    let ours = 0;\n    while (ours < clientIDs.length && clientIDs[ours] == ourID)\n        ++ours;\n    let unconfirmed = collabState.unconfirmed.slice(ours);\n    steps = ours ? steps.slice(ours) : steps;\n    // If all steps originated with us, we're done.\n    if (!steps.length)\n        return state.tr.setMeta(collabKey, new CollabState(version, unconfirmed));\n    let nUnconfirmed = unconfirmed.length;\n    let tr = state.tr;\n    if (nUnconfirmed) {\n        unconfirmed = rebaseSteps(unconfirmed, steps, tr);\n    }\n    else {\n        for (let i = 0; i < steps.length; i++)\n            tr.step(steps[i]);\n        unconfirmed = [];\n    }\n    let newCollabState = new CollabState(version, unconfirmed);\n    if (options && options.mapSelectionBackward && state.selection instanceof TextSelection) {\n        tr.setSelection(TextSelection.between(tr.doc.resolve(tr.mapping.map(state.selection.anchor, -1)), tr.doc.resolve(tr.mapping.map(state.selection.head, -1)), -1));\n        tr.updated &= ~1;\n    }\n    return tr.setMeta(\"rebased\", nUnconfirmed).setMeta(\"addToHistory\", false).setMeta(collabKey, newCollabState);\n}\n/**\nProvides data describing the editor's unconfirmed steps, which need\nto be sent to the central authority. Returns null when there is\nnothing to send.\n\n`origins` holds the _original_ transactions that produced each\nsteps. This can be useful for looking up time stamps and other\nmetadata for the steps, but note that the steps may have been\nrebased, whereas the origin transactions are still the old,\nunchanged objects.\n*/\nfunction sendableSteps(state) {\n    let collabState = collabKey.getState(state);\n    if (collabState.unconfirmed.length == 0)\n        return null;\n    return {\n        version: collabState.version,\n        steps: collabState.unconfirmed.map(s => s.step),\n        clientID: collabKey.get(state).spec.config.clientID,\n        get origins() {\n            return this._origins || (this._origins = collabState.unconfirmed.map(s => s.origin));\n        }\n    };\n}\n/**\nGet the version up to which the collab plugin has synced with the\ncentral authority.\n*/\nfunction getVersion(state) {\n    return collabKey.getState(state).version;\n}\n\nexport { collab, getVersion, rebaseSteps, receiveTransaction, sendableSteps };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}