{"ast":null,"code":"import { Node, mergeAttributes, Mark, getMarkAttributes, wrappingInputRule } from '@tiptap/core';\nconst ListItem = Node.create({\n  name: 'listItem',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: 'paragraph block*',\n  defining: true,\n  parseHTML() {\n    return [{\n      tag: 'li'\n    }];\n  },\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name)\n    };\n  }\n});\nconst TextStyle = Mark.create({\n  name: 'textStyle',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'span',\n      getAttrs: element => {\n        const hasStyles = element.hasAttribute('style');\n        if (!hasStyles) {\n          return false;\n        }\n        return {};\n      }\n    }];\n  },\n  renderHTML(_ref2) {\n    let {\n      HTMLAttributes\n    } = _ref2;\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => _ref3 => {\n        let {\n          state,\n          commands\n        } = _ref3;\n        const attributes = getMarkAttributes(state, this.type);\n        const hasStyles = Object.entries(attributes).some(_ref4 => {\n          let [, value] = _ref4;\n          return !!value;\n        });\n        if (hasStyles) {\n          return true;\n        }\n        return commands.unsetMark(this.name);\n      }\n    };\n  }\n});\nconst inputRegex = /^(\\d+)\\.\\s$/;\nconst OrderedList = Node.create({\n  name: 'orderedList',\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false\n    };\n  },\n  group: 'block list',\n  content() {\n    return `${this.options.itemTypeName}+`;\n  },\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start') ? parseInt(element.getAttribute('start') || '', 10) : 1;\n        }\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'ol'\n    }];\n  },\n  renderHTML(_ref5) {\n    let {\n      HTMLAttributes\n    } = _ref5;\n    const {\n      start,\n      ...attributesWithoutStart\n    } = HTMLAttributes;\n    return start === 1 ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0] : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      toggleOrderedList: () => _ref6 => {\n        let {\n          commands,\n          chain\n        } = _ref6;\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList()\n    };\n  },\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: match => ({\n        start: +match[1]\n      }),\n      joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1]\n    });\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: match => ({\n          start: +match[1],\n          ...this.editor.getAttributes(TextStyle.name)\n        }),\n        joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n        editor: this.editor\n      });\n    }\n    return [inputRule];\n  }\n});\nexport { OrderedList, OrderedList as default, inputRegex };","map":{"version":3,"names":["ListItem","Node","create","name","addOptions","HTMLAttributes","content","defining","parseHTML","tag","renderHTML","_ref","mergeAttributes","options","addKeyboardShortcuts","Enter","editor","commands","splitListItem","Tab","sinkListItem","Shift-Tab","liftListItem","TextStyle","Mark","getAttrs","element","hasStyles","hasAttribute","_ref2","addCommands","removeEmptyTextStyle","_ref3","state","attributes","getMarkAttributes","type","Object","entries","some","_ref4","value","unsetMark","inputRegex","OrderedList","itemTypeName","keepMarks","keepAttributes","group","addAttributes","start","default","parseInt","getAttribute","_ref5","attributesWithoutStart","toggleOrderedList","_ref6","chain","toggleList","updateAttributes","getAttributes","run","Mod-Shift-7","addInputRules","inputRule","wrappingInputRule","find","match","joinPredicate","node","childCount","attrs"],"sources":["/Users/xander/go/hexon/frontend/node_modules/@tiptap/extension-list-item/src/list-item.ts","/Users/xander/go/hexon/frontend/node_modules/@tiptap/extension-text-style/src/text-style.ts","/Users/xander/go/hexon/frontend/node_modules/@tiptap/extension-ordered-list/src/ordered-list.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ListItemOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\nexport const ListItem = Node.create<ListItemOptions>({\n  name: 'listItem',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'paragraph block*',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      {\n        tag: 'li',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\n    }\n  },\n})\n","import {\n  getMarkAttributes,\n  Mark,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface TextStyleOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textStyle: {\n      /**\n       * Remove spans without inline style attributes.\n       */\n      removeEmptyTextStyle: () => ReturnType,\n    }\n  }\n}\n\nexport const TextStyle = Mark.create<TextStyleOptions>({\n  name: 'textStyle',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'span',\n        getAttrs: element => {\n          const hasStyles = (element as HTMLElement).hasAttribute('style')\n\n          if (!hasStyles) {\n            return false\n          }\n\n          return {}\n        },\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({ state, commands }) => {\n        const attributes = getMarkAttributes(state, this.type)\n        const hasStyles = Object.entries(attributes).some(([, value]) => !!value)\n\n        if (hasStyles) {\n          return true\n        }\n\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n})\n","import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nimport ListItem from '../../extension-list-item/src'\nimport TextStyle from '../../extension-text-style/src'\n\nexport interface OrderedListOptions {\n  itemTypeName: string,\n  HTMLAttributes: Record<string, any>,\n  keepMarks: boolean,\n  keepAttributes: boolean,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    orderedList: {\n      /**\n       * Toggle an ordered list\n       */\n      toggleOrderedList: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^(\\d+)\\.\\s$/\n\nexport const OrderedList = Node.create<OrderedListOptions>({\n  name: 'orderedList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false,\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start')\n            ? parseInt(element.getAttribute('start') || '', 10)\n            : 1\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'ol',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const { start, ...attributesWithoutStart } = HTMLAttributes\n\n    return start === 1\n      ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\n      : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({ commands, chain }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run()\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\n    }\n  },\n\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: match => ({ start: +match[1] }),\n      joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n    })\n\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: match => ({ start: +match[1], ...this.editor.getAttributes(TextStyle.name) }),\n        joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n        editor: this.editor,\n      })\n    }\n    return [\n      inputRule,\n    ]\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}