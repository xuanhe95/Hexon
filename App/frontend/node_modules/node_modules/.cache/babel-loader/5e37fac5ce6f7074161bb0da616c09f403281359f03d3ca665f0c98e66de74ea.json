{"ast":null,"code":"import { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nimport { Plugin, PluginKey, TextSelection } from '@tiptap/pm/state';\nconst backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/;\nconst tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/;\nconst CodeBlock = Node.create({\n  name: 'codeBlock',\n  addOptions() {\n    return {\n      languageClassPrefix: 'language-',\n      exitOnTripleEnter: true,\n      exitOnArrowDown: true,\n      HTMLAttributes: {}\n    };\n  },\n  content: 'text*',\n  marks: '',\n  group: 'block',\n  code: true,\n  defining: true,\n  addAttributes() {\n    return {\n      language: {\n        default: null,\n        parseHTML: element => {\n          var _a;\n          const {\n            languageClassPrefix\n          } = this.options;\n          const classNames = [...(((_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.classList) || [])];\n          const languages = classNames.filter(className => className.startsWith(languageClassPrefix)).map(className => className.replace(languageClassPrefix, ''));\n          const language = languages[0];\n          if (!language) {\n            return null;\n          }\n          return language;\n        },\n        rendered: false\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'pre',\n      preserveWhitespace: 'full'\n    }];\n  },\n  renderHTML(_ref) {\n    let {\n      node,\n      HTMLAttributes\n    } = _ref;\n    return ['pre', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), ['code', {\n      class: node.attrs.language ? this.options.languageClassPrefix + node.attrs.language : null\n    }, 0]];\n  },\n  addCommands() {\n    return {\n      setCodeBlock: attributes => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.setNode(this.name, attributes);\n      },\n      toggleCodeBlock: attributes => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        return commands.toggleNode(this.name, 'paragraph', attributes);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),\n      // remove code block when at start of document or code block is empty\n      Backspace: () => {\n        const {\n          empty,\n          $anchor\n        } = this.editor.state.selection;\n        const isAtStart = $anchor.pos === 1;\n        if (!empty || $anchor.parent.type.name !== this.name) {\n          return false;\n        }\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return this.editor.commands.clearNodes();\n        }\n        return false;\n      },\n      // exit node on triple enter\n      Enter: _ref4 => {\n        let {\n          editor\n        } = _ref4;\n        if (!this.options.exitOnTripleEnter) {\n          return false;\n        }\n        const {\n          state\n        } = editor;\n        const {\n          selection\n        } = state;\n        const {\n          $from,\n          empty\n        } = selection;\n        if (!empty || $from.parent.type !== this.type) {\n          return false;\n        }\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        const endsWithDoubleNewline = $from.parent.textContent.endsWith('\\n\\n');\n        if (!isAtEnd || !endsWithDoubleNewline) {\n          return false;\n        }\n        return editor.chain().command(_ref5 => {\n          let {\n            tr\n          } = _ref5;\n          tr.delete($from.pos - 2, $from.pos);\n          return true;\n        }).exitCode().run();\n      },\n      // exit node on arrow down\n      ArrowDown: _ref6 => {\n        let {\n          editor\n        } = _ref6;\n        if (!this.options.exitOnArrowDown) {\n          return false;\n        }\n        const {\n          state\n        } = editor;\n        const {\n          selection,\n          doc\n        } = state;\n        const {\n          $from,\n          empty\n        } = selection;\n        if (!empty || $from.parent.type !== this.type) {\n          return false;\n        }\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        if (!isAtEnd) {\n          return false;\n        }\n        const after = $from.after();\n        if (after === undefined) {\n          return false;\n        }\n        const nodeAfter = doc.nodeAt(after);\n        if (nodeAfter) {\n          return false;\n        }\n        return editor.commands.exitCode();\n      }\n    };\n  },\n  addInputRules() {\n    return [textblockTypeInputRule({\n      find: backtickInputRegex,\n      type: this.type,\n      getAttributes: match => ({\n        language: match[1]\n      })\n    }), textblockTypeInputRule({\n      find: tildeInputRegex,\n      type: this.type,\n      getAttributes: match => ({\n        language: match[1]\n      })\n    })];\n  },\n  addProseMirrorPlugins() {\n    return [\n    // this plugin creates a code block for pasted content from VS Code\n    // we can also detect the copied code language\n    new Plugin({\n      key: new PluginKey('codeBlockVSCodeHandler'),\n      props: {\n        handlePaste: (view, event) => {\n          if (!event.clipboardData) {\n            return false;\n          }\n          // donâ€™t create a new code block within code blocks\n          if (this.editor.isActive(this.type.name)) {\n            return false;\n          }\n          const text = event.clipboardData.getData('text/plain');\n          const vscode = event.clipboardData.getData('vscode-editor-data');\n          const vscodeData = vscode ? JSON.parse(vscode) : undefined;\n          const language = vscodeData === null || vscodeData === void 0 ? void 0 : vscodeData.mode;\n          if (!text || !language) {\n            return false;\n          }\n          const {\n            tr\n          } = view.state;\n          // create an empty code block\n          tr.replaceSelectionWith(this.type.create({\n            language\n          }));\n          // put cursor inside the newly created code block\n          tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))));\n          // add text to code block\n          // strip carriage return chars from text pasted as code\n          // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\n          tr.insertText(text.replace(/\\r\\n?/g, '\\n'));\n          // store meta information\n          // this is useful for other plugins that depends on the paste event\n          // like the paste rule plugin\n          tr.setMeta('paste', true);\n          view.dispatch(tr);\n          return true;\n        }\n      }\n    })];\n  }\n});\nexport { CodeBlock, backtickInputRegex, CodeBlock as default, tildeInputRegex };","map":{"version":3,"names":["backtickInputRegex","tildeInputRegex","CodeBlock","Node","create","name","addOptions","languageClassPrefix","exitOnTripleEnter","exitOnArrowDown","HTMLAttributes","content","marks","group","code","defining","addAttributes","language","default","parseHTML","element","options","classNames","_a","firstElementChild","classList","languages","filter","className","startsWith","map","replace","rendered","tag","preserveWhitespace","renderHTML","_ref","node","mergeAttributes","class","attrs","addCommands","setCodeBlock","attributes","_ref2","commands","setNode","toggleCodeBlock","_ref3","toggleNode","addKeyboardShortcuts","Mod-Alt-c","editor","Backspace","empty","$anchor","state","selection","isAtStart","pos","parent","type","textContent","length","clearNodes","Enter","_ref4","$from","isAtEnd","parentOffset","nodeSize","endsWithDoubleNewline","endsWith","chain","command","_ref5","tr","delete","exitCode","run","ArrowDown","_ref6","doc","after","undefined","nodeAfter","nodeAt","addInputRules","textblockTypeInputRule","find","getAttributes","match","addProseMirrorPlugins","Plugin","key","PluginKey","props","handlePaste","view","event","clipboardData","isActive","text","getData","vscode","vscodeData","JSON","parse","mode","replaceSelectionWith","setSelection","TextSelection","near","resolve","Math","max","from","insertText","setMeta","dispatch"],"sources":["/Users/xander/go/hexon/frontend/node_modules/@tiptap/extension-code-block/src/code-block.ts"],"sourcesContent":["import { mergeAttributes, Node, textblockTypeInputRule } from '@tiptap/core'\nimport { Plugin, PluginKey, TextSelection } from '@tiptap/pm/state'\n\nexport interface CodeBlockOptions {\n  /**\n   * Adds a prefix to language classes that are applied to code tags.\n   * Defaults to `'language-'`.\n   */\n  languageClassPrefix: string\n  /**\n   * Define whether the node should be exited on triple enter.\n   * Defaults to `true`.\n   */\n  exitOnTripleEnter: boolean\n  /**\n   * Define whether the node should be exited on arrow down if there is no node after it.\n   * Defaults to `true`.\n   */\n  exitOnArrowDown: boolean\n  /**\n   * Custom HTML attributes that should be added to the rendered HTML tag.\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    codeBlock: {\n      /**\n       * Set a code block\n       */\n      setCodeBlock: (attributes?: { language: string }) => ReturnType\n      /**\n       * Toggle a code block\n       */\n      toggleCodeBlock: (attributes?: { language: string }) => ReturnType\n    }\n  }\n}\n\nexport const backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/\nexport const tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/\n\nexport const CodeBlock = Node.create<CodeBlockOptions>({\n  name: 'codeBlock',\n\n  addOptions() {\n    return {\n      languageClassPrefix: 'language-',\n      exitOnTripleEnter: true,\n      exitOnArrowDown: true,\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'text*',\n\n  marks: '',\n\n  group: 'block',\n\n  code: true,\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      language: {\n        default: null,\n        parseHTML: element => {\n          const { languageClassPrefix } = this.options\n          const classNames = [...(element.firstElementChild?.classList || [])]\n          const languages = classNames\n            .filter(className => className.startsWith(languageClassPrefix))\n            .map(className => className.replace(languageClassPrefix, ''))\n          const language = languages[0]\n\n          if (!language) {\n            return null\n          }\n\n          return language\n        },\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'pre',\n        preserveWhitespace: 'full',\n      },\n    ]\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    return [\n      'pre',\n      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\n      [\n        'code',\n        {\n          class: node.attrs.language\n            ? this.options.languageClassPrefix + node.attrs.language\n            : null,\n        },\n        0,\n      ],\n    ]\n  },\n\n  addCommands() {\n    return {\n      setCodeBlock:\n        attributes => ({ commands }) => {\n          return commands.setNode(this.name, attributes)\n        },\n      toggleCodeBlock:\n        attributes => ({ commands }) => {\n          return commands.toggleNode(this.name, 'paragraph', attributes)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),\n\n      // remove code block when at start of document or code block is empty\n      Backspace: () => {\n        const { empty, $anchor } = this.editor.state.selection\n        const isAtStart = $anchor.pos === 1\n\n        if (!empty || $anchor.parent.type.name !== this.name) {\n          return false\n        }\n\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return this.editor.commands.clearNodes()\n        }\n\n        return false\n      },\n\n      // exit node on triple enter\n      Enter: ({ editor }) => {\n        if (!this.options.exitOnTripleEnter) {\n          return false\n        }\n\n        const { state } = editor\n        const { selection } = state\n        const { $from, empty } = selection\n\n        if (!empty || $from.parent.type !== this.type) {\n          return false\n        }\n\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2\n        const endsWithDoubleNewline = $from.parent.textContent.endsWith('\\n\\n')\n\n        if (!isAtEnd || !endsWithDoubleNewline) {\n          return false\n        }\n\n        return editor\n          .chain()\n          .command(({ tr }) => {\n            tr.delete($from.pos - 2, $from.pos)\n\n            return true\n          })\n          .exitCode()\n          .run()\n      },\n\n      // exit node on arrow down\n      ArrowDown: ({ editor }) => {\n        if (!this.options.exitOnArrowDown) {\n          return false\n        }\n\n        const { state } = editor\n        const { selection, doc } = state\n        const { $from, empty } = selection\n\n        if (!empty || $from.parent.type !== this.type) {\n          return false\n        }\n\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2\n\n        if (!isAtEnd) {\n          return false\n        }\n\n        const after = $from.after()\n\n        if (after === undefined) {\n          return false\n        }\n\n        const nodeAfter = doc.nodeAt(after)\n\n        if (nodeAfter) {\n          return false\n        }\n\n        return editor.commands.exitCode()\n      },\n    }\n  },\n\n  addInputRules() {\n    return [\n      textblockTypeInputRule({\n        find: backtickInputRegex,\n        type: this.type,\n        getAttributes: match => ({\n          language: match[1],\n        }),\n      }),\n      textblockTypeInputRule({\n        find: tildeInputRegex,\n        type: this.type,\n        getAttributes: match => ({\n          language: match[1],\n        }),\n      }),\n    ]\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      // this plugin creates a code block for pasted content from VS Code\n      // we can also detect the copied code language\n      new Plugin({\n        key: new PluginKey('codeBlockVSCodeHandler'),\n        props: {\n          handlePaste: (view, event) => {\n            if (!event.clipboardData) {\n              return false\n            }\n\n            // donâ€™t create a new code block within code blocks\n            if (this.editor.isActive(this.type.name)) {\n              return false\n            }\n\n            const text = event.clipboardData.getData('text/plain')\n            const vscode = event.clipboardData.getData('vscode-editor-data')\n            const vscodeData = vscode ? JSON.parse(vscode) : undefined\n            const language = vscodeData?.mode\n\n            if (!text || !language) {\n              return false\n            }\n\n            const { tr } = view.state\n\n            // create an empty code block\n            tr.replaceSelectionWith(this.type.create({ language }))\n\n            // put cursor inside the newly created code block\n            tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))))\n\n            // add text to code block\n            // strip carriage return chars from text pasted as code\n            // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\n            tr.insertText(text.replace(/\\r\\n?/g, '\\n'))\n\n            // store meta information\n            // this is useful for other plugins that depends on the paste event\n            // like the paste rule plugin\n            tr.setMeta('paste', true)\n\n            view.dispatch(tr)\n\n            return true\n          },\n        },\n      }),\n    ]\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}