{"ast":null,"code":"import '@tiptap/extension-text-style';\nimport { Extension } from '@tiptap/core';\nconst Color = Extension.create({\n  name: 'color',\n  addOptions() {\n    return {\n      types: ['textStyle']\n    };\n  },\n  addGlobalAttributes() {\n    return [{\n      types: this.options.types,\n      attributes: {\n        color: {\n          default: null,\n          parseHTML: element => {\n            var _a;\n            return (_a = element.style.color) === null || _a === void 0 ? void 0 : _a.replace(/['\"]+/g, '');\n          },\n          renderHTML: attributes => {\n            if (!attributes.color) {\n              return {};\n            }\n            return {\n              style: `color: ${attributes.color}`\n            };\n          }\n        }\n      }\n    }];\n  },\n  addCommands() {\n    return {\n      setColor: color => _ref => {\n        let {\n          chain\n        } = _ref;\n        return chain().setMark('textStyle', {\n          color\n        }).run();\n      },\n      unsetColor: () => _ref2 => {\n        let {\n          chain\n        } = _ref2;\n        return chain().setMark('textStyle', {\n          color: null\n        }).removeEmptyTextStyle().run();\n      }\n    };\n  }\n});\nexport { Color, Color as default };","map":{"version":3,"names":["Color","Extension","create","name","addOptions","types","addGlobalAttributes","options","attributes","color","default","parseHTML","element","_a","style","replace","renderHTML","addCommands","setColor","_ref","chain","setMark","run","unsetColor","_ref2","removeEmptyTextStyle"],"sources":["/Users/xander/go/hexon/frontend/node_modules/@tiptap/extension-color/src/color.ts"],"sourcesContent":["import '@tiptap/extension-text-style'\n\nimport { Extension } from '@tiptap/core'\n\nexport type ColorOptions = {\n  types: string[],\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    color: {\n      /**\n       * Set the text color\n       */\n      setColor: (color: string) => ReturnType,\n      /**\n       * Unset the text color\n       */\n      unsetColor: () => ReturnType,\n    }\n  }\n}\n\nexport const Color = Extension.create<ColorOptions>({\n  name: 'color',\n\n  addOptions() {\n    return {\n      types: ['textStyle'],\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          color: {\n            default: null,\n            parseHTML: element => element.style.color?.replace(/['\"]+/g, ''),\n            renderHTML: attributes => {\n              if (!attributes.color) {\n                return {}\n              }\n\n              return {\n                style: `color: ${attributes.color}`,\n              }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setColor: color => ({ chain }) => {\n        return chain()\n          .setMark('textStyle', { color })\n          .run()\n      },\n      unsetColor: () => ({ chain }) => {\n        return chain()\n          .setMark('textStyle', { color: null })\n          .removeEmptyTextStyle()\n          .run()\n      },\n    }\n  },\n})\n"],"mappings":";;AAuBa,MAAAA,KAAK,GAAGC,SAAS,CAACC,MAAM,CAAe;EAClDC,IAAI,EAAE,OAAO;EAEbC,UAAUA,CAAA;IACR,OAAO;MACLC,KAAK,EAAE,CAAC,WAAW;KACpB;GACF;EAEDC,mBAAmBA,CAAA;IACjB,OAAO,CACL;MACED,KAAK,EAAE,IAAI,CAACE,OAAO,CAACF,KAAK;MACzBG,UAAU,EAAE;QACVC,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,SAAS,EAAEC,OAAO;YAAA,IAAAC,EAAA;YAAI,QAAAA,EAAA,GAAAD,OAAO,CAACE,KAAK,CAACL,KAAK,cAAAI,EAAA,uBAAAA,EAAA,CAAEE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;UAAA;UAChEC,UAAU,EAAER,UAAU,IAAG;YACvB,IAAI,CAACA,UAAU,CAACC,KAAK,EAAE;cACrB,OAAO,EAAE;YACV;YAED,OAAO;cACLK,KAAK,EAAE,UAAUN,UAAU,CAACC,KAAO;aACpC;;QAEJ;MACF;IACF,EACF;GACF;EAEDQ,WAAWA,CAAA;IACT,OAAO;MACLC,QAAQ,EAAET,KAAK,IAAIU,IAAA,IAAc;QAAA,IAAb;UAAEC;QAAK,CAAE,GAAAD,IAAA;QAC3B,OAAOC,KAAK,EAAE,CACXC,OAAO,CAAC,WAAW,EAAE;UAAEZ;QAAK,CAAE,CAAC,CAC/Ba,GAAG,EAAE;OACT;MACDC,UAAU,EAAEA,CAAA,KAAMC,KAAA,IAAc;QAAA,IAAb;UAAEJ;QAAK,CAAE,GAAAI,KAAA;QAC1B,OAAOJ,KAAK,EAAE,CACXC,OAAO,CAAC,WAAW,EAAE;UAAEZ,KAAK,EAAE;QAAI,CAAE,CAAC,CACrCgB,oBAAoB,EAAE,CACtBH,GAAG,EAAE;;KAEX;;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}