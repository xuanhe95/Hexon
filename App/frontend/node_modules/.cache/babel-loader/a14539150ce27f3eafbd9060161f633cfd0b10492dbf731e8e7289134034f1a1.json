{"ast":null,"code":"import { Mark, mergeAttributes, getMarkAttributes } from '@tiptap/core';\nconst TextStyle = Mark.create({\n  name: 'textStyle',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'span',\n      getAttrs: element => {\n        const hasStyles = element.hasAttribute('style');\n        if (!hasStyles) {\n          return false;\n        }\n        return {};\n      }\n    }];\n  },\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => _ref2 => {\n        let {\n          state,\n          commands\n        } = _ref2;\n        const attributes = getMarkAttributes(state, this.type);\n        const hasStyles = Object.entries(attributes).some(_ref3 => {\n          let [, value] = _ref3;\n          return !!value;\n        });\n        if (hasStyles) {\n          return true;\n        }\n        return commands.unsetMark(this.name);\n      }\n    };\n  }\n});\nexport { TextStyle, TextStyle as default };","map":{"version":3,"names":["TextStyle","Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","getAttrs","element","hasStyles","hasAttribute","renderHTML","_ref","mergeAttributes","options","addCommands","removeEmptyTextStyle","_ref2","state","commands","attributes","getMarkAttributes","type","Object","entries","some","_ref3","value","unsetMark"],"sources":["/Users/xander/go/hexon/frontend/node_modules/@tiptap/extension-text-style/src/text-style.ts"],"sourcesContent":["import {\n  getMarkAttributes,\n  Mark,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface TextStyleOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textStyle: {\n      /**\n       * Remove spans without inline style attributes.\n       */\n      removeEmptyTextStyle: () => ReturnType,\n    }\n  }\n}\n\nexport const TextStyle = Mark.create<TextStyleOptions>({\n  name: 'textStyle',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'span',\n        getAttrs: element => {\n          const hasStyles = (element as HTMLElement).hasAttribute('style')\n\n          if (!hasStyles) {\n            return false\n          }\n\n          return {}\n        },\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({ state, commands }) => {\n        const attributes = getMarkAttributes(state, this.type)\n        const hasStyles = Object.entries(attributes).some(([, value]) => !!value)\n\n        if (hasStyles) {\n          return true\n        }\n\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n})\n"],"mappings":";AAqBa,MAAAA,SAAS,GAAGC,IAAI,CAACC,MAAM,CAAmB;EACrDC,IAAI,EAAE,WAAW;EAEjBC,UAAUA,CAAA;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,SAASA,CAAA;IACP,OAAO,CACL;MACEC,GAAG,EAAE,MAAM;MACXC,QAAQ,EAAEC,OAAO,IAAG;QAClB,MAAMC,SAAS,GAAID,OAAuB,CAACE,YAAY,CAAC,OAAO,CAAC;QAEhE,IAAI,CAACD,SAAS,EAAE;UACd,OAAO,KAAK;QACb;QAED,OAAO,EAAE;;IAEZ,EACF;GACF;EAEDE,UAAUA,CAAAC,IAAA,EAAmB;IAAA,IAAlB;MAAER;IAAc,CAAE,GAAAQ,IAAA;IAC3B,OAAO,CAAC,MAAM,EAAEC,eAAe,CAAC,IAAI,CAACC,OAAO,CAACV,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GACjF;EAEDW,WAAWA,CAAA;IACT,OAAO;MACLC,oBAAoB,EAAEA,CAAA,KAAMC,KAAA,IAAwB;QAAA,IAAvB;UAAEC,KAAK;UAAEC;QAAQ,CAAE,GAAAF,KAAA;QAC9C,MAAMG,UAAU,GAAGC,iBAAiB,CAACH,KAAK,EAAE,IAAI,CAACI,IAAI,CAAC;QACtD,MAAMb,SAAS,GAAGc,MAAM,CAACC,OAAO,CAACJ,UAAU,CAAC,CAACK,IAAI,CAACC,KAAA;UAAA,IAAC,GAAGC,KAAK,CAAC,GAAAD,KAAA;UAAA,OAAK,CAAC,CAACC,KAAK;QAAA,EAAC;QAEzE,IAAIlB,SAAS,EAAE;UACb,OAAO,IAAI;QACZ;QAED,OAAOU,QAAQ,CAACS,SAAS,CAAC,IAAI,CAAC1B,IAAI,CAAC;;KAEvC;;AAGJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}